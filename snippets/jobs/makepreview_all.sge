# Make Previews using Paraview of all the files in a directory 
# This is designed for all types of experiments with *_bw, *_dto, *_nh endings
#
# This script uses the tight integration of openmpi-1.4.3-intel-12.1 in SGE
# using the parallel environment (PE) "orte".  
# This script must be used only with qsub command - do NOT run it as a stand-alone 
# shell script because it will start all processes on the local node.   
# Define your job name, parallel environment with the number of slots, and run time: 
#  -o /gpfs/home/mader/MakePreview2.log
#$ -cwd
#$ -j y
#$ -pe smp 1
#$ -M kevinmader+merlinsge@gmail.com
#$ -m ae
#$ -o MakePreviewA.log
#$ -N MakePreviewsA
#$ -l mem_free=22G,ram=22G,s_rt=23:59:00,h_rt=24:00:00
###################################################
# Fix the SGE environment-handling bug (bash):
source /usr/share/Modules/init/sh
export -n -f module
scratchDir="/home/scratch/$(whoami)/"
mkdir $scratchDir
module add paraview
export CLASSPATH=/afs/psi.ch/project/tipl/jar/TIPL.jar
JCMD="/afs/psi.ch/project/tipl/jvm/bin/java"
JARGS="-d64 -Xmx12G -Xms10G" 
pvpython='/opt/paraview/paraview-3.14.0/bin/pvpython'
vaim="$JCMD $JARGS tipl.formats.VirtualAim"
fscale="$JCMD tipl.tools.VFilterScale"

startDir=$(pwd)
#startDir="/gpfs/home/mader/new/"

if [ -d "$startDir/previews" ]
then
	echo "Preview directory exists already!"
else
	mkdir $startDir/previews
fi
for file in *
do
        if [ -d "$file" ]; then
                cd "$file";
		pwd
		# poros
		filelist="poros plat bubbles thickmap"
		for cfile in *_bw.tif; do filelist="$filelist ${cfile%.*}"; done # Masks
		for cfile in *_dto.tif; do filelist="$filelist ${cfile%.*}"; done # Thickness maps
		for cfile in *_nh.tif; do filelist="$filelist ${cfile%.*}"; done # Neighbor images
		for obj in $filelist
		do
                	outPngFile="$startDir/previews/$obj-$file.png"
			
			if ([ -a "$outPngFile" ] && [ ! -a "$obj.tif"])
			then
				echo "Image - $outPngFile: Exists Already or Missing Tif"
			else
				echo "Starting, Converting to Raw $outPngFile"
				RAWFILE="$scratchDir/$obj-$file.raw"
				IMGFILE="$scratchDir/$obj-$file.tif"
				LOCALCMD="cp $obj.tif $IMGFILE"
				echo "$LOCALCMD"
				$LOCALCMD
				CONVCMD="$vaim -convert=$IMGFILE -localdir=$scratchDir -output=$RAWFILE"
				# This allows the data to be rescaled (for very large datasets paraview gets crashy)
				#CONVCMD="$fscale -input=$IMGFILE -output=$RAWFILE"
				echo "$CONVCMD"
				$CONVCMD
				# Rendering using Paraview
				PVCMD="$pvpython /afs/psi.ch/project/tipl/Python/pvrawrender.py $RAWFILE"
				if [[ $obj == *dto* ]]
				then
					PVCMD="$PVCMD 0 160"
				fi
				if [[ $obj == *nh* ]]
				then
					PVCMD="$PVCMD 0 20"
				fi
				
				
				echo "$PVCMD"
				$PVCMD
				# Renaming and cleaning up
				FIXCMD="cp $RAWFILE.png $outPngFile"
				$FIXCMD
				RMCMD="rm $RAWFILE"
				echo "$RMCMD"
				$RMCMD
				RMCMD="rm $IMGFILE"
				echo "$RMCMD"
				$RMCMD
				continue
			fi
		done
		
		RMCMD="rm $scratchDir/*$file*.*"
		echo "$RMCMD"
		$RMCMD
		
                cd ..;
                continue
        fi
done
RMCMD="rm -Rf $scratchDir"
$RMCMD

###################################################
